// SPDX-License-Identifier: MIT

pragma solidity 0.8.22;


function canVote(address member) public view returns (bool) {
        return isMember(member) && block.timestamp - members[member].firstParticipationDate >= 12 * 30 days;
    }

    function conductVote(uint256[] calldata votes, uint256 changeThreshold, uint256 newValue) external onlyMember returns (bool) {
        require(votes.length >= PARTICIPANT_THRESHOLD, "Not enough participants for the vote");
        
        uint256 totalVotes = 0;
        for (uint256 i = 0; i < votes.length; i++) {
            if (canVote(address(i))) {
                totalVotes += votes[i];
            }
        }

        if (totalVotes >= changeThreshold) {
            // Execute the change
            // For simplicity, this contract assumes a simple boolean state change.
            // You would need to adapt this part based on your actual voting mechanism.
            // newValue represents the new boolean state after the vote.
            // For example, if newValue is 1, it means "true", and if newValue is 0, it means "false".
            // You might need to change this logic based on your specific use case.
            return newValue == 1;
        }

        return false;
    }



    // SPDX-License-Identifier: MIT

pragma solidity 0.8.22;

contract FactChecking {

    // Variables 

    struct writer {
        address,
 
    }

    struct document {
        address,

    }

    struct checker {
        address,

    }


    // enum

    // Array

    // mapping

    // event
    // article publiched
    // document published
    

    // constructor

    // Modifier

    // function





}


// SUBMITSxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    
    // Reader reports
    function submitReaderReport(address report, bool isVerifier) external onlyReader {
        
        reports[msg.sender][report]++;
        emit ReportSubmitted(msg.sender, subject, isVerifier);

        if (isVerifier && reports[msg.sender][subject] >= reportNumToBeVerifier) {
            promoteToVerifier(msg.sender);
        }
    }

    // Verifier reports
    function submitVerifierReport(address report, bool isVerifier) external onlyVerifier {
        
        reports[msg.sender][report]++;
        emit ReportSubmitted(msg.sender, subject, isVerifier);

        if (isVerifier && reports[msg.sender][subject] >= reportNumToBeVerifier) {
            promoteToVerifier(msg.sender);
        }
    }

    // Author reports
    function submitArticle(address report, bool isVerifier) external onlyAuthor {
        
        reports[msg.sender][report]++;
        emit ReportSubmitted(msg.sender, subject, isVerifier);

        if (isVerifier && reports[msg.sender][subject] >= reportNumToBeVerifier) {
            PromotedToVerifier(msg.sender);
        }
    }


     // SPDX-License-Identifier: MIT
 pragma solidity >=0.4.22 <0.9.0;

 contract Articles {
 struct Article {
   string title;
   string cid;
 }

 mapping(string => Article) public articles;

 function publishArticle(string memory title, string memory cid) public {
   articles[cid] = Article(title, cid);
 }
 }


import { useWagmi } from 'wagmi';
 import pinataSDK from '@pinata/sdk';

 const { account, library, chainId, provider } = useWagmi();
 const pinata = pinataSDK('yourPinataJWTKey');

 const metadata = {
 title: 'Mon titre',
 content: 'Mon contenu',
 };
 const result = await pinata.pinJSONToIPFS(metadata);
 const cid = result.IpfsHash;

 const contract = new library.eth.Contract(abi, contractAddress);
 const tx = contract.methods.publishArticle('Mon titre', cid);
 const gas = await tx.estimateGas({ from: account });
 const data = tx.encodeABI();
 const txData = {
 to: contractAddress,
 data,
 gas,
 };
 const signedTx = await provider.signTransaction(txData);
 const receipt = await provider.sendTransaction(signedTx);
 console.log(receipt);


  uint256 requiredReportsForVerifierPromotion = 10;
    uint256 requiredVerificationsForAuthorPromotion  = 20;
    uint256 timeIntervalForVerifierPromotion = 6 * 30 days;
    uint256 timeIntervalForAuthorPromotion = 12 * 30 days;


     // if (workflowChangeTime >= 1 weeks) {
        //     votingStart()
        // }
            console.log(workflowChangeTime);

              if (old.workflowChangeTime >= 7 * days) {
        workflowStatus = WorkflowStatus(_num++);
        }
        emit WorkflowStatusChange(old_WorkflowStatus, workflowStatus);
       } 


describe("AUTOMATED VOTING START CONDITIONS", async function () {
  let voting, owner, voter1, voter2, author, verifier, users;

  let authors = [];
  let verifiers = [];

  async function initializeBlockchain500() {
    [owner, voter1, voter2, author, verifier, ...users] =
      await ethers.getSigners();
    const contract = await ethers.getContractFactory("Voting");
    voting = await contract.deploy(owner);

    console.log("USER", users.length);

    for (let i = 0; i < 250; i++) {
      let authorAddress = await voting
        .connect(owner)
        .createAuthor(users[i].address);
      authors.push(authorAddress);
    }

    for (let i = 0; i < 250; i++) {
      let verifierAddress = await voting
        .connect(owner)
        .createVerifier(users[i].address);
      verifiers.push(verifierAddress);
    }

    return { voting, authors, verifiers };
  }

  async function initializeBlockchain501() {
    [owner, voter1, voter2, author, verifier, ...users] =
      await ethers.getSigners();
    const contract = await ethers.getContractFactory("Voting");
    voting = await contract.deploy(owner);

    console.log("USER", users.length);

    let authorAddress1 = await voting
      .connect(owner)
      .createAuthor(owner.address);
    authors.push(authorAddress1);
    let authorAddress2 = await voting
      .connect(owner)
      .createAuthor(voter1.address);
    authors.push(authorAddress2);
    let authorAddress3 = await voting
      .connect(owner)
      .createAuthor(voter2.address);
    authors.push(authorAddress3);
    let authorAddress4 = await voting
      .connect(owner)
      .createAuthor(author.address);
    authors.push(authorAddress4);
    let authorAddress5 = await voting
      .connect(owner)
      .createAuthor(verifier.address);
    authors.push(authorAddress5);

    // for (let i = 0; i < 250; i++) {
    //   let verifierAddress = await voting.connect(owner).createVerifier(users[i].address);
    //   verifiers.push(verifierAddress);
    // }

    return {
      voting,
      authorAddress1,
      authorAddress2,
      authorAddress3,
      authorAddress4,
      authorAddress5,
    };
  }

  it("SHOULD NOT start voting when there are less than 500 eligible members request", async function () {
    const {
      authorAddress1,
      authorAddress2,
      authorAddress3,
      authorAddress4,
      authorAddress5,
      voting,
    } = await loadFixture(initializeBlockchain500);

    await voting.connect(authorAddress1).changeTotalReportNumber();
    await voting.connect(authorAddress2).changeTotalReportNumber();

    // await expect(
    //   voting.connect(author).changeTotalReportNumber()
    // ).to.be.revertedWith(
    //   "There should be more than 500 eligible requests so that a voting session starts"
    // );
    const workflowStatus = await voting.workflowStatus();
    expect(workflowStatus).to.equal(0);
  });

  it("SHOULD start voting when there are more than 500 eligible members request", async function () {
    const {
      owner,
      voter1,
      voter2,
      author,
      verifier,
      authors,
      verifiers,
      voting,
    } = await loadFixture(initializeBlockchain501);

    const workflowStatus = await voting.workflowStatus();
    expect(workflowStatus).to.equal(1);
  });
});






   // // Promoted to verifier
    // function fromReaderToVerifier() external {
    //     require(readers[msg.sender].totalReportNumber >= requiredReportsForVerifierPromotion, "Not enough reports for verifier promotion");
    //     require(readers[msg.sender].firstReportDate > timeIntervalForVerifierPromotion, "Not eligible for verifier promotion yet");
    //     verifiers[msg.sender] = Verifier(true, block.timestamp, 0);  
    //     emit PromotedToVerifier(msg.sender, block.timestamp);
    // }

    // // Promoted to author
    // function fromVerifierToAuthor() external onlyVerifier {
    //     require(verifiers[msg.sender].totalVerificationDoneNumber >= requiredVerificationsForAuthorPromotion, "Not enough verifications for author promotion");
    //     require(readers[msg.sender].firstReportDate > timeIntervalForAuthorPromotion,"Not eligible for author promotion yet" );
    //     verifiers[msg.sender].isVerifier = false;
    //     authors[msg.sender] = Author(true, 0);
    //     emit PromotedToAuthor(msg.sender, block.timestamp);
    // }